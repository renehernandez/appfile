{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"appfile \u00b6 Deploy App Specs to DigitalOcean App Platform About \u00b6 appfile is a declarative spec for deploying apps to the DigitalOcean App Platform. It lets you: Keep a directory of app spec values files and maintain changes in version control Apply CI/CD to configuration changes Visualize a diff of the changes to be applied Installation \u00b6 appfile can be installed in several ways. Homebrew \u00b6 You can install directly with using the renehernandez/taps as follows: $ brew install renehernandez/taps/appfile Download releases \u00b6 You can always download the released binaries directly from the Github Releases page. For the latest releases check here Github Action \u00b6 You can leverage appfile with your Github Actions workflows, by using action-appfile : Marketplace: https://github.com/marketplace/actions/github-action-for-appfile-cli Repository URL: https://github.com/renehernandez/action-appfile Defaults \u00b6 The default name for an appfile is appfile.yaml The default environment is default The access token to DigitalOcean can be specified through the access-token flag or the DIGITALOCEAN_ACCESS_TOKEN environment variable Getting Started \u00b6 Let\u2019s look at several app examples and see how appfile can help you to manage your App specification and deployments. Introductory example \u00b6 This example will deploy a static site without any custom values nor environment values. # appfile.yaml specs: - ./app.yaml # app.yaml name: sample-html static_sites: - environment_slug: html github: branch: main deploy_on_push: true repo: renehernandez/sample-html name: sample-html Sync your App specification to DigitalOcean App Platform by running: Using access token flag: appfile sync --file /path/to/appfile.yaml --access-token <token> Using DIGITALOCEAN_ACCESS_TOKEN environment variable appfile sync --file /path/to/appfile.yaml For the example above, you don\u2019t need appfile , you can use instead the doctl cli to deploy your app. Let\u2019s look at a more interesting example next with a fictitious Django app, which will show the flexibility of environments. Intermediate example \u00b6 This next example deploys an App containing a service definition. The 2 environments: review and production will customize the final specification of the app to be deployed. Let\u2019s look at the appfile.yaml , app.yaml and environments definitions below. # appfile.yaml environments: review: - ./envs/review.yaml production: - ./envs/production.yaml specs: - ./app.yaml # app.yaml name: {{ .Values.name }} services: - name: web github: repo: <repo-url> branch: main deploy_on_push: {{ .Values.deploy_on_push }} envs: - key: WEBSITE_NAME value: {{ requiredEnv \"WEBSITE_NAME\" }} # review.yaml name: sample-review deploy_on_push: true # production.yaml name: sample-production deploy_on_push: false You can deploy your App in review by running: WEBSITE_NAME='Appfile Review' appfile sync --file /path/to/appfile.yaml --environment review The final App spec to be synced to DigitalOcean would be: name: sample-review services: - name: web github: repo: <repo-url> branch: main deploy_on_push: true routes: - path: / envs: - key: WEBSITE_NAME value: Appfile Review Or you can deploy your App in production: WEBSITE_NAME='Appfile Prod' appfile sync --file /path/to/appfile.yaml --environment production The final App spec to be synced to DigitalOcean would be: name: sample-production services: - name: web github: repo: <repo-url> branch: main deploy_on_push: false routes: - path: / envs: - key: WEBSITE_NAME value: Appfile Prod A more complex example \u00b6 Finally let\u2019s go over a more complex scenario, using a Rails app as an example. The app spec declares a rails service, a migration job and a database. The 2 environments: review and production will customize the final App spec that gets synced with DigitalOcean. Let\u2019s look at the appfile.yaml , app.yaml and environments definitions below. # appfile.yaml environments: review: - ./envs/review.yaml production: - ./envs/production.yaml specs: - ./app.yaml name: {{ .Values.name }} services: - name: rails-app image: registry_type: DOCR repository: <repo_name> tag: {{ requiredEnv \"IMAGE_TAG\" }} instance_size_slug: {{ .Values.rails.instance_slug }} instance_count: {{ .Values.rails.instance_count }} envs: {{- range $key, $value := .Values.rails.envs }} - key: {{ $key }} value: {{ $value }} {{- end }} {{- if eq .Environment.Name \"review\" }} - name: postgres image: registry_type: DOCR repository: postgres tag: '12.4' internal_ports: - 5432 envs: {{- range $key, $value := .Values.postgres.envs }} - key: {{ $key }} value: {{ $value }} {{- end }} {{- end }} jobs: - name: migrations image: registry_type: DOCR repository: <repo_name> tag: {{ requiredEnv \"IMAGE_TAG\" }}**** envs: {{- range $key, $value := .Values.migrations.envs }} - key: {{ $key }} value: {{ $value }} {{- end }} {{- if eq .Environment.Name \"production\" }} databases: - name: db production: true cluster_name: mydatabase engine: PG version: \"12\" {{- end }} # review.yaml name: sample-{{ requiredEnv \"REVIEW_HOSTNAME\" }} .common_envs: &common_envs DB_USERNAME: postgres DB_PASSWORD: password RAILS_ENV: production rails: instance_slug: basic-xxs instance_count: 1 envs: <<: *common_envs postgres: envs: POSTGRES_USER: postgres POSTGRES_DB: mydatabase POSTGRES_PASSWORD: password migrations: envs: <<: *common_envs # production.yaml name: sample-production .common_envs: &common_envs DB_USERNAME: postgres DB_PASSWORD: strong_password RAILS_ENV: production rails: instance_slug: professional-xs instance_count: 3 envs: <<: *common_envs migrations: envs: <<: *common_envs You can deploy your App in review by running: IMAGE_TAG='fad7869fdaldabh23' REVIEW_HOSTNAME='fix-bug' appfile sync --file /path/to/appfile.yaml --environment review This would deploy a public rails service, and internal postgres service (the database running on a container) and would run the migration job. The final App spec to be synced to DigitalOcean would be: name: sample-fix-bug services: - name: rails-app image: registry_type: DOCR repository: <app-repo> tag: fad7869fdaldabh23 instance_size_slug: basic-xxs instance_count: 1 routes: - path: / envs: - key: DB_PASSWORD value: password - key: DB_USERNAME value: postgres - key: RAILS_ENV value: production - name: postgres image: registry_type: DOCR repository: postgres tag: '12.4' internal_ports: - 5432 envs: - key: POSTGRES_DB value: mydatabase - key: POSTGRES_PASSWORD value: password - key: POSTGRES_USER value: postgres jobs: - name: migrations image: registry_type: DOCR repository: <migration-repo> tag: fad7869fdaldabh23 envs: - key: DB_PASSWORD value: password - key: DB_USERNAME value: postgres - key: RAILS_ENV value: production Or you can deploy your App in production instead: IMAGE_TAG='fad7869fdaldabh23' appfile sync --file /path/to/appfile.yaml --environment production This would deploy a public rails service and a migration job. Both components would connect to an existing database. The final App spec to be synced to DigitalOcean would be: name: sample-production services: - name: rails-app image: registry_type: DOCR repository: <app-repo> tag: fad7869fdaldabh23 instance_size_slug: professional-xs instance_count: 3 routes: - path: / envs: - key: DB_PASSWORD value: strong_password - key: DB_USERNAME value: postgres - key: RAILS_ENV value: production jobs: - name: migrations image: registry_type: DOCR repository: <migration-repo> tag: fad7869fdaldabh23 envs: - key: DB_PASSWORD value: strong_password - key: DB_USERNAME value: postgres - key: RAILS_ENV value: production databases: - name: db production: true cluster_name: mydb engine: PG version: \"12\" You can check out more examples in the examples folder of this repo Writing appfile \u00b6 For patterns, resources and tips writing appfile, check the Writing appfile guide . CLI Reference \u00b6 See CLI Reference Documentation for information about each available command. Contributing \u00b6 Check out the Contributing page. Changelog \u00b6 For inspecting the changes and tag releases, check the Changelog page Appreciation \u00b6 This project is inspired in helmfile , from which I have borrowed heavily for the first iteration License \u00b6 Check out the LICENSE for details","title":"appfile ![CI](https://github.com/renehernandez/appfile/workflows/CI/badge.svg)"},{"location":"#appfile","text":"Deploy App Specs to DigitalOcean App Platform","title":"appfile"},{"location":"#about","text":"appfile is a declarative spec for deploying apps to the DigitalOcean App Platform. It lets you: Keep a directory of app spec values files and maintain changes in version control Apply CI/CD to configuration changes Visualize a diff of the changes to be applied","title":"About"},{"location":"#installation","text":"appfile can be installed in several ways.","title":"Installation"},{"location":"#homebrew","text":"You can install directly with using the renehernandez/taps as follows: $ brew install renehernandez/taps/appfile","title":"Homebrew"},{"location":"#download-releases","text":"You can always download the released binaries directly from the Github Releases page. For the latest releases check here","title":"Download releases"},{"location":"#github-action","text":"You can leverage appfile with your Github Actions workflows, by using action-appfile : Marketplace: https://github.com/marketplace/actions/github-action-for-appfile-cli Repository URL: https://github.com/renehernandez/action-appfile","title":"Github Action"},{"location":"#defaults","text":"The default name for an appfile is appfile.yaml The default environment is default The access token to DigitalOcean can be specified through the access-token flag or the DIGITALOCEAN_ACCESS_TOKEN environment variable","title":"Defaults"},{"location":"#getting-started","text":"Let\u2019s look at several app examples and see how appfile can help you to manage your App specification and deployments.","title":"Getting Started"},{"location":"#introductory-example","text":"This example will deploy a static site without any custom values nor environment values. # appfile.yaml specs: - ./app.yaml # app.yaml name: sample-html static_sites: - environment_slug: html github: branch: main deploy_on_push: true repo: renehernandez/sample-html name: sample-html Sync your App specification to DigitalOcean App Platform by running: Using access token flag: appfile sync --file /path/to/appfile.yaml --access-token <token> Using DIGITALOCEAN_ACCESS_TOKEN environment variable appfile sync --file /path/to/appfile.yaml For the example above, you don\u2019t need appfile , you can use instead the doctl cli to deploy your app. Let\u2019s look at a more interesting example next with a fictitious Django app, which will show the flexibility of environments.","title":"Introductory example"},{"location":"#intermediate-example","text":"This next example deploys an App containing a service definition. The 2 environments: review and production will customize the final specification of the app to be deployed. Let\u2019s look at the appfile.yaml , app.yaml and environments definitions below. # appfile.yaml environments: review: - ./envs/review.yaml production: - ./envs/production.yaml specs: - ./app.yaml # app.yaml name: {{ .Values.name }} services: - name: web github: repo: <repo-url> branch: main deploy_on_push: {{ .Values.deploy_on_push }} envs: - key: WEBSITE_NAME value: {{ requiredEnv \"WEBSITE_NAME\" }} # review.yaml name: sample-review deploy_on_push: true # production.yaml name: sample-production deploy_on_push: false You can deploy your App in review by running: WEBSITE_NAME='Appfile Review' appfile sync --file /path/to/appfile.yaml --environment review The final App spec to be synced to DigitalOcean would be: name: sample-review services: - name: web github: repo: <repo-url> branch: main deploy_on_push: true routes: - path: / envs: - key: WEBSITE_NAME value: Appfile Review Or you can deploy your App in production: WEBSITE_NAME='Appfile Prod' appfile sync --file /path/to/appfile.yaml --environment production The final App spec to be synced to DigitalOcean would be: name: sample-production services: - name: web github: repo: <repo-url> branch: main deploy_on_push: false routes: - path: / envs: - key: WEBSITE_NAME value: Appfile Prod","title":"Intermediate example"},{"location":"#a-more-complex-example","text":"Finally let\u2019s go over a more complex scenario, using a Rails app as an example. The app spec declares a rails service, a migration job and a database. The 2 environments: review and production will customize the final App spec that gets synced with DigitalOcean. Let\u2019s look at the appfile.yaml , app.yaml and environments definitions below. # appfile.yaml environments: review: - ./envs/review.yaml production: - ./envs/production.yaml specs: - ./app.yaml name: {{ .Values.name }} services: - name: rails-app image: registry_type: DOCR repository: <repo_name> tag: {{ requiredEnv \"IMAGE_TAG\" }} instance_size_slug: {{ .Values.rails.instance_slug }} instance_count: {{ .Values.rails.instance_count }} envs: {{- range $key, $value := .Values.rails.envs }} - key: {{ $key }} value: {{ $value }} {{- end }} {{- if eq .Environment.Name \"review\" }} - name: postgres image: registry_type: DOCR repository: postgres tag: '12.4' internal_ports: - 5432 envs: {{- range $key, $value := .Values.postgres.envs }} - key: {{ $key }} value: {{ $value }} {{- end }} {{- end }} jobs: - name: migrations image: registry_type: DOCR repository: <repo_name> tag: {{ requiredEnv \"IMAGE_TAG\" }}**** envs: {{- range $key, $value := .Values.migrations.envs }} - key: {{ $key }} value: {{ $value }} {{- end }} {{- if eq .Environment.Name \"production\" }} databases: - name: db production: true cluster_name: mydatabase engine: PG version: \"12\" {{- end }} # review.yaml name: sample-{{ requiredEnv \"REVIEW_HOSTNAME\" }} .common_envs: &common_envs DB_USERNAME: postgres DB_PASSWORD: password RAILS_ENV: production rails: instance_slug: basic-xxs instance_count: 1 envs: <<: *common_envs postgres: envs: POSTGRES_USER: postgres POSTGRES_DB: mydatabase POSTGRES_PASSWORD: password migrations: envs: <<: *common_envs # production.yaml name: sample-production .common_envs: &common_envs DB_USERNAME: postgres DB_PASSWORD: strong_password RAILS_ENV: production rails: instance_slug: professional-xs instance_count: 3 envs: <<: *common_envs migrations: envs: <<: *common_envs You can deploy your App in review by running: IMAGE_TAG='fad7869fdaldabh23' REVIEW_HOSTNAME='fix-bug' appfile sync --file /path/to/appfile.yaml --environment review This would deploy a public rails service, and internal postgres service (the database running on a container) and would run the migration job. The final App spec to be synced to DigitalOcean would be: name: sample-fix-bug services: - name: rails-app image: registry_type: DOCR repository: <app-repo> tag: fad7869fdaldabh23 instance_size_slug: basic-xxs instance_count: 1 routes: - path: / envs: - key: DB_PASSWORD value: password - key: DB_USERNAME value: postgres - key: RAILS_ENV value: production - name: postgres image: registry_type: DOCR repository: postgres tag: '12.4' internal_ports: - 5432 envs: - key: POSTGRES_DB value: mydatabase - key: POSTGRES_PASSWORD value: password - key: POSTGRES_USER value: postgres jobs: - name: migrations image: registry_type: DOCR repository: <migration-repo> tag: fad7869fdaldabh23 envs: - key: DB_PASSWORD value: password - key: DB_USERNAME value: postgres - key: RAILS_ENV value: production Or you can deploy your App in production instead: IMAGE_TAG='fad7869fdaldabh23' appfile sync --file /path/to/appfile.yaml --environment production This would deploy a public rails service and a migration job. Both components would connect to an existing database. The final App spec to be synced to DigitalOcean would be: name: sample-production services: - name: rails-app image: registry_type: DOCR repository: <app-repo> tag: fad7869fdaldabh23 instance_size_slug: professional-xs instance_count: 3 routes: - path: / envs: - key: DB_PASSWORD value: strong_password - key: DB_USERNAME value: postgres - key: RAILS_ENV value: production jobs: - name: migrations image: registry_type: DOCR repository: <migration-repo> tag: fad7869fdaldabh23 envs: - key: DB_PASSWORD value: strong_password - key: DB_USERNAME value: postgres - key: RAILS_ENV value: production databases: - name: db production: true cluster_name: mydb engine: PG version: \"12\" You can check out more examples in the examples folder of this repo","title":"A more complex example"},{"location":"#writing-appfile","text":"For patterns, resources and tips writing appfile, check the Writing appfile guide .","title":"Writing appfile"},{"location":"#cli-reference","text":"See CLI Reference Documentation for information about each available command.","title":"CLI Reference"},{"location":"#contributing","text":"Check out the Contributing page.","title":"Contributing"},{"location":"#changelog","text":"For inspecting the changes and tag releases, check the Changelog page","title":"Changelog"},{"location":"#appreciation","text":"This project is inspired in helmfile , from which I have borrowed heavily for the first iteration","title":"Appreciation"},{"location":"#license","text":"Check out the LICENSE for details","title":"License"},{"location":"CHANGELOG/","text":"Changelog \u00b6 v0.0.4 (2020-12-02) \u00b6 Implemented enhancements: Add homebrew automated formulae update #14 Documentation: Update installation section in Readme #15 Closed issues: Add homebrew formulae #1 v0.0.3 (2020-11-27) \u00b6 Implemented enhancements: Print hostname when app is deployed #10 Default values for scope, instance_size_slug, instance_count and kind fields #13 Print hostname per app after sync operation #11 Fixed bugs: Fix hostname successfully deleted message being shown when domain wasn\u2019t found #12 v0.0.2 (2020-11-23) \u00b6 Implemented enhancements: Delete CNAME record during destroy operation #8 Documentation: Docs improvements: action-appfile, writing appfile and cli ref #9 Closed issues: Delete CNAME on app file destroy #7 Add Github Action for appfile #3 v0.0.1 (2020-11-22) \u00b6 Closed issues: Configure CI for release #5 Merged pull requests: Add build artifacts as part of CI #6 * This Changelog was automatically generated by github_changelog_generator","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#v004-2020-12-02","text":"Implemented enhancements: Add homebrew automated formulae update #14 Documentation: Update installation section in Readme #15 Closed issues: Add homebrew formulae #1","title":"v0.0.4 (2020-12-02)"},{"location":"CHANGELOG/#v003-2020-11-27","text":"Implemented enhancements: Print hostname when app is deployed #10 Default values for scope, instance_size_slug, instance_count and kind fields #13 Print hostname per app after sync operation #11 Fixed bugs: Fix hostname successfully deleted message being shown when domain wasn\u2019t found #12","title":"v0.0.3 (2020-11-27)"},{"location":"CHANGELOG/#v002-2020-11-23","text":"Implemented enhancements: Delete CNAME record during destroy operation #8 Documentation: Docs improvements: action-appfile, writing appfile and cli ref #9 Closed issues: Delete CNAME on app file destroy #7 Add Github Action for appfile #3","title":"v0.0.2 (2020-11-23)"},{"location":"CHANGELOG/#v001-2020-11-22","text":"Closed issues: Configure CI for release #5 Merged pull requests: Add build artifacts as part of CI #6 * This Changelog was automatically generated by github_changelog_generator","title":"v0.0.1 (2020-11-22)"},{"location":"CONTRIBUTING/","text":"Contributing to Appfile \u00b6 Please take a moment to review this document in order to make the contribution process easy and effective for everyone involved! Using the issue tracker \u00b6 You can use the issues tracker for: Contributing to Appfile Using the issue tracker Bug reports Feature requests Pull requests Use Stackoverflow for questions and personal support requests. Bug reports \u00b6 A bug is a demonstrable problem that is caused by the code in the repository. Good bug reports are extremely helpful - thank you! Guidelines for bug reports: Use the GitHub issue search \u2014 check if the issue has already been reported. Check if the issue has been fixed \u2014 try to reproduce it using the main branch in the repository. Isolate and report the problem \u2014 ideally create a reduced test case. Please try to be as detailed as possible in your report. Include information about your Appfile binary. Please provide steps to reproduce the issue as well as the outcome you were expecting! All these details will help developers to fix any potential bugs. Example: Short and descriptive example bug report title A summary of the issue and the environment in which it occurs. If suitable, include the steps required to reproduce the bug. This is the first step This is the second step Further steps, etc. Any other information you want to share that is relevant to the issue being reported. This might include the lines of code that you have identified as causing the bug, and potential solutions (and your opinions on their merits). Feature requests \u00b6 Feature requests are welcome. But take a moment to find out whether your idea fits with the scope and aims of the project. It\u2019s up to you to make a strong case to convince the community of the merits of this feature. Please provide as much detail and context as possible. Pull requests \u00b6 Good pull requests - patches, improvements, new features - are a fantastic help. They should remain focused in scope and avoid containing unrelated commits. IMPORTANT : By submitting a patch, you agree that your work will be licensed under the license used by the project. If you have any large pull request in mind (e.g. implementing features, refactoring code, etc), please ask first otherwise you risk spending a lot of time working on something that the project\u2019s developers might not want to merge into the project. Please adhere to the coding conventions in the project (indentation, accurate comments, etc.) and don\u2019t forget to add your own tests and documentation. When working with git, we recommend the following process in order to craft an excellent pull request: Fork the project, clone your fork, and configure the remotes: sh # Clone your fork of the repo into the current directory git clone https://github.com/<your-username>/appfile # Navigate to the newly cloned directory cd appfile # Assign the original repo to a remote called \"upstream\" git remote add upstream https://github.com/renehernandez/appfile If you cloned a while ago, get the latest changes from upstream: bash git checkout main git pull upstream main Create a new topic branch (off of main ) to contain your feature, change, or fix. IMPORTANT : Making changes in main is discouraged. You should always keep your local main in sync with upstream main and make your changes in topic branches. sh git checkout -b <topic-branch-name> Commit your changes in logical chunks. Keep your commit messages organized, with a short description in the first line and more detailed information on the following lines. Feel free to use Git\u2019s interactive rebase feature to tidy up your commits before making them public. Make sure all the tests are still passing. sh rake Push your topic branch up to your fork: sh git push origin <topic-branch-name> Open a Pull Request with a clear title and description. If you haven\u2019t updated your pull request for a while, you should consider rebasing on main and resolving any conflicts. IMPORTANT : Never ever merge upstream main into your branches. You should always git rebase on main to bring your changes up to date when necessary. sh git checkout main git pull upstream main git checkout <your-topic-branch> git rebase main Thank you for your contributions!","title":"Contributing to Appfile"},{"location":"CONTRIBUTING/#contributing-to-appfile","text":"Please take a moment to review this document in order to make the contribution process easy and effective for everyone involved!","title":"Contributing to Appfile"},{"location":"CONTRIBUTING/#using-the-issue-tracker","text":"You can use the issues tracker for: Contributing to Appfile Using the issue tracker Bug reports Feature requests Pull requests Use Stackoverflow for questions and personal support requests.","title":"Using the issue tracker"},{"location":"CONTRIBUTING/#bug-reports","text":"A bug is a demonstrable problem that is caused by the code in the repository. Good bug reports are extremely helpful - thank you! Guidelines for bug reports: Use the GitHub issue search \u2014 check if the issue has already been reported. Check if the issue has been fixed \u2014 try to reproduce it using the main branch in the repository. Isolate and report the problem \u2014 ideally create a reduced test case. Please try to be as detailed as possible in your report. Include information about your Appfile binary. Please provide steps to reproduce the issue as well as the outcome you were expecting! All these details will help developers to fix any potential bugs. Example: Short and descriptive example bug report title A summary of the issue and the environment in which it occurs. If suitable, include the steps required to reproduce the bug. This is the first step This is the second step Further steps, etc. Any other information you want to share that is relevant to the issue being reported. This might include the lines of code that you have identified as causing the bug, and potential solutions (and your opinions on their merits).","title":"Bug reports"},{"location":"CONTRIBUTING/#feature-requests","text":"Feature requests are welcome. But take a moment to find out whether your idea fits with the scope and aims of the project. It\u2019s up to you to make a strong case to convince the community of the merits of this feature. Please provide as much detail and context as possible.","title":"Feature requests"},{"location":"CONTRIBUTING/#pull-requests","text":"Good pull requests - patches, improvements, new features - are a fantastic help. They should remain focused in scope and avoid containing unrelated commits. IMPORTANT : By submitting a patch, you agree that your work will be licensed under the license used by the project. If you have any large pull request in mind (e.g. implementing features, refactoring code, etc), please ask first otherwise you risk spending a lot of time working on something that the project\u2019s developers might not want to merge into the project. Please adhere to the coding conventions in the project (indentation, accurate comments, etc.) and don\u2019t forget to add your own tests and documentation. When working with git, we recommend the following process in order to craft an excellent pull request: Fork the project, clone your fork, and configure the remotes: sh # Clone your fork of the repo into the current directory git clone https://github.com/<your-username>/appfile # Navigate to the newly cloned directory cd appfile # Assign the original repo to a remote called \"upstream\" git remote add upstream https://github.com/renehernandez/appfile If you cloned a while ago, get the latest changes from upstream: bash git checkout main git pull upstream main Create a new topic branch (off of main ) to contain your feature, change, or fix. IMPORTANT : Making changes in main is discouraged. You should always keep your local main in sync with upstream main and make your changes in topic branches. sh git checkout -b <topic-branch-name> Commit your changes in logical chunks. Keep your commit messages organized, with a short description in the first line and more detailed information on the following lines. Feel free to use Git\u2019s interactive rebase feature to tidy up your commits before making them public. Make sure all the tests are still passing. sh rake Push your topic branch up to your fork: sh git push origin <topic-branch-name> Open a Pull Request with a clear title and description. If you haven\u2019t updated your pull request for a while, you should consider rebasing on main and resolving any conflicts. IMPORTANT : Never ever merge upstream main into your branches. You should always git rebase on main to bring your changes up to date when necessary. sh git checkout main git pull upstream main git checkout <your-topic-branch> git rebase main Thank you for your contributions!","title":"Pull requests"},{"location":"writing_appfile/","text":"Writing appfile \u00b6 Templating \u00b6 Appfile uses go templates for templating your appfile.yaml . While golang ships several built-in functions, we have added all of the functions in the sprig library . We also added the following functions: requiredEnv : allows you to declare a particular environment variable as required for template rendering. If the value is not set, the template rendering step will fail with an error message. toYaml : allows you to get a values block and output the corresponding yaml representation Environment Variables \u00b6 Environments variables can be used anywhere for templating the appfile. Note \u00b6 If you wish to treat your environment variables as strings always, even if they are boolean or numeric values you can use {{ env \"ENV_NAME\" | quote }} or \"{{ env \"ENV_NAME\" }}\" . These approaches also work with the requiredEnv function. Paths Overview \u00b6 Using spec files in conjunction with cli arguments can be a bit confusing. A few rules to clear up this ambiguity: Absolute paths are always resolved as absolute paths Relative paths referenced in the appfile spec itself are relative to that spec. Relative paths referenced on the command line are relative to the current working directory the user is in","title":"Writing appfile"},{"location":"writing_appfile/#writing-appfile","text":"","title":"Writing appfile"},{"location":"writing_appfile/#templating","text":"Appfile uses go templates for templating your appfile.yaml . While golang ships several built-in functions, we have added all of the functions in the sprig library . We also added the following functions: requiredEnv : allows you to declare a particular environment variable as required for template rendering. If the value is not set, the template rendering step will fail with an error message. toYaml : allows you to get a values block and output the corresponding yaml representation","title":"Templating"},{"location":"writing_appfile/#environment-variables","text":"Environments variables can be used anywhere for templating the appfile.","title":"Environment Variables"},{"location":"writing_appfile/#note","text":"If you wish to treat your environment variables as strings always, even if they are boolean or numeric values you can use {{ env \"ENV_NAME\" | quote }} or \"{{ env \"ENV_NAME\" }}\" . These approaches also work with the requiredEnv function.","title":"Note"},{"location":"writing_appfile/#paths-overview","text":"Using spec files in conjunction with cli arguments can be a bit confusing. A few rules to clear up this ambiguity: Absolute paths are always resolved as absolute paths Relative paths referenced in the appfile spec itself are relative to that spec. Relative paths referenced on the command line are relative to the current working directory the user is in","title":"Paths Overview"},{"location":"cmd/appfile/","text":"appfile \u00b6 Deploy app platform specifications to DigitalOcean Options \u00b6 -t, --access-token string API V2 access token -e, --environment string root all resources from spec file (default \"default\") -f, --file string load appfile spec from file (default \"appfile.yaml\") -h, --help help for appfile --log-level string Set log level (default \"info\") SEE ALSO \u00b6 appfile destroy - Destroy apps running in DigitalOcean appfile diff - Diff local app spec against app spec running in DigitalOcean appfile list - List all apps defined in the appfile appfile sync - Sync all resources from app platform specs to DigitalOcean Auto generated by spf13/cobra on 9-Dec-2020 \u00b6","title":"Appfile"},{"location":"cmd/appfile/#appfile","text":"Deploy app platform specifications to DigitalOcean","title":"appfile"},{"location":"cmd/appfile/#options","text":"-t, --access-token string API V2 access token -e, --environment string root all resources from spec file (default \"default\") -f, --file string load appfile spec from file (default \"appfile.yaml\") -h, --help help for appfile --log-level string Set log level (default \"info\")","title":"Options"},{"location":"cmd/appfile/#see-also","text":"appfile destroy - Destroy apps running in DigitalOcean appfile diff - Diff local app spec against app spec running in DigitalOcean appfile list - List all apps defined in the appfile appfile sync - Sync all resources from app platform specs to DigitalOcean","title":"SEE ALSO"},{"location":"cmd/appfile/#auto-generated-by-spf13cobra-on-9-dec-2020","text":"","title":"Auto generated by spf13/cobra on 9-Dec-2020"},{"location":"cmd/appfile_destroy/","text":"appfile destroy \u00b6 Destroy apps running in DigitalOcean Synopsis \u00b6 Destroy apps running in DigitalOcean It fails without deleting any app if any of the apps declared in the appfile spec is not found in DigitalOcean appfile destroy [flags] Examples \u00b6 # Destroy using defaults: appfile.yaml in current location, default environment and DIGITALOCEAN_ACCESS_TOKEN env var appfile destroy # Destroy using appfile.yaml in custom location, review environment and access token option appfile destroy --file /path/to/appfile.yaml --environment review --access-token $TOKEN # Destroy with debug output appfile destroy --log-level debug Options \u00b6 -h, --help help for destroy Options inherited from parent commands \u00b6 -t, --access-token string API V2 access token -e, --environment string root all resources from spec file (default \"default\") -f, --file string load appfile spec from file (default \"appfile.yaml\") --log-level string Set log level (default \"info\") SEE ALSO \u00b6 appfile - Deploy app platform specifications to DigitalOcean Auto generated by spf13/cobra on 9-Dec-2020 \u00b6","title":"Appfile destroy"},{"location":"cmd/appfile_destroy/#appfile-destroy","text":"Destroy apps running in DigitalOcean","title":"appfile destroy"},{"location":"cmd/appfile_destroy/#synopsis","text":"Destroy apps running in DigitalOcean It fails without deleting any app if any of the apps declared in the appfile spec is not found in DigitalOcean appfile destroy [flags]","title":"Synopsis"},{"location":"cmd/appfile_destroy/#examples","text":"# Destroy using defaults: appfile.yaml in current location, default environment and DIGITALOCEAN_ACCESS_TOKEN env var appfile destroy # Destroy using appfile.yaml in custom location, review environment and access token option appfile destroy --file /path/to/appfile.yaml --environment review --access-token $TOKEN # Destroy with debug output appfile destroy --log-level debug","title":"Examples"},{"location":"cmd/appfile_destroy/#options","text":"-h, --help help for destroy","title":"Options"},{"location":"cmd/appfile_destroy/#options-inherited-from-parent-commands","text":"-t, --access-token string API V2 access token -e, --environment string root all resources from spec file (default \"default\") -f, --file string load appfile spec from file (default \"appfile.yaml\") --log-level string Set log level (default \"info\")","title":"Options inherited from parent commands"},{"location":"cmd/appfile_destroy/#see-also","text":"appfile - Deploy app platform specifications to DigitalOcean","title":"SEE ALSO"},{"location":"cmd/appfile_destroy/#auto-generated-by-spf13cobra-on-9-dec-2020","text":"","title":"Auto generated by spf13/cobra on 9-Dec-2020"},{"location":"cmd/appfile_diff/","text":"appfile diff \u00b6 Diff local app spec against app spec running in DigitalOcean Synopsis \u00b6 Diff local app spec against app spec running in DigitalOcean appfile diff [flags] Examples \u00b6 # Diff using defaults: appfile.yaml in current location, default environment and DIGITALOCEAN_ACCESS_TOKEN env var appfile diff # Diff using appfile.yaml in custom location, review environment and access token option appfile diff --file /path/to/appfile.yaml --environment review --access-token $TOKEN # Diff with debug output appfile sync --log-level debug Options \u00b6 -h, --help help for diff Options inherited from parent commands \u00b6 -t, --access-token string API V2 access token -e, --environment string root all resources from spec file (default \"default\") -f, --file string load appfile spec from file (default \"appfile.yaml\") --log-level string Set log level (default \"info\") SEE ALSO \u00b6 appfile - Deploy app platform specifications to DigitalOcean Auto generated by spf13/cobra on 9-Dec-2020 \u00b6","title":"Appfile diff"},{"location":"cmd/appfile_diff/#appfile-diff","text":"Diff local app spec against app spec running in DigitalOcean","title":"appfile diff"},{"location":"cmd/appfile_diff/#synopsis","text":"Diff local app spec against app spec running in DigitalOcean appfile diff [flags]","title":"Synopsis"},{"location":"cmd/appfile_diff/#examples","text":"# Diff using defaults: appfile.yaml in current location, default environment and DIGITALOCEAN_ACCESS_TOKEN env var appfile diff # Diff using appfile.yaml in custom location, review environment and access token option appfile diff --file /path/to/appfile.yaml --environment review --access-token $TOKEN # Diff with debug output appfile sync --log-level debug","title":"Examples"},{"location":"cmd/appfile_diff/#options","text":"-h, --help help for diff","title":"Options"},{"location":"cmd/appfile_diff/#options-inherited-from-parent-commands","text":"-t, --access-token string API V2 access token -e, --environment string root all resources from spec file (default \"default\") -f, --file string load appfile spec from file (default \"appfile.yaml\") --log-level string Set log level (default \"info\")","title":"Options inherited from parent commands"},{"location":"cmd/appfile_diff/#see-also","text":"appfile - Deploy app platform specifications to DigitalOcean","title":"SEE ALSO"},{"location":"cmd/appfile_diff/#auto-generated-by-spf13cobra-on-9-dec-2020","text":"","title":"Auto generated by spf13/cobra on 9-Dec-2020"},{"location":"cmd/appfile_list/","text":"appfile list \u00b6 List all apps defined in the appfile Synopsis \u00b6 List all apps defined in the appfile. Optionally list components defined in a particular app. appfile list [flags] Examples \u00b6 # List using defaults: appfile.yaml in current location, default environment and DIGITALOCEAN_ACCESS_TOKEN env var appfile list # Diff using appfile.yaml in custom location, review environment and access token option appfile list --file /path/to/appfile.yaml --environment review --access-token $TOKEN # List components in app with debug output appfile list --log-level debug Options \u00b6 -h, --help help for list Options inherited from parent commands \u00b6 -t, --access-token string API V2 access token -e, --environment string root all resources from spec file (default \"default\") -f, --file string load appfile spec from file (default \"appfile.yaml\") --log-level string Set log level (default \"info\") SEE ALSO \u00b6 appfile - Deploy app platform specifications to DigitalOcean Auto generated by spf13/cobra on 9-Dec-2020 \u00b6","title":"Appfile list"},{"location":"cmd/appfile_list/#appfile-list","text":"List all apps defined in the appfile","title":"appfile list"},{"location":"cmd/appfile_list/#synopsis","text":"List all apps defined in the appfile. Optionally list components defined in a particular app. appfile list [flags]","title":"Synopsis"},{"location":"cmd/appfile_list/#examples","text":"# List using defaults: appfile.yaml in current location, default environment and DIGITALOCEAN_ACCESS_TOKEN env var appfile list # Diff using appfile.yaml in custom location, review environment and access token option appfile list --file /path/to/appfile.yaml --environment review --access-token $TOKEN # List components in app with debug output appfile list --log-level debug","title":"Examples"},{"location":"cmd/appfile_list/#options","text":"-h, --help help for list","title":"Options"},{"location":"cmd/appfile_list/#options-inherited-from-parent-commands","text":"-t, --access-token string API V2 access token -e, --environment string root all resources from spec file (default \"default\") -f, --file string load appfile spec from file (default \"appfile.yaml\") --log-level string Set log level (default \"info\")","title":"Options inherited from parent commands"},{"location":"cmd/appfile_list/#see-also","text":"appfile - Deploy app platform specifications to DigitalOcean","title":"SEE ALSO"},{"location":"cmd/appfile_list/#auto-generated-by-spf13cobra-on-9-dec-2020","text":"","title":"Auto generated by spf13/cobra on 9-Dec-2020"},{"location":"cmd/appfile_sync/","text":"appfile sync \u00b6 Sync all resources from app platform specs to DigitalOcean Synopsis \u00b6 Sync all resources from app platform specs to DigitalOcean If there is no app with the existing name, a new app will be create. Otherwise the existing app will be updated with the changes in the spec. appfile sync [flags] Examples \u00b6 # Sync using defaults: appfile.yaml in current location, default environment and DIGITALOCEAN_ACCESS_TOKEN env var appfile sync # Sync using appfile.yaml in custom location, review environment and access token option appfile sync --file /path/to/appfile.yaml --environment review --access-token $TOKEN # Sync with debug output appfile sync --log-level debug Options \u00b6 -h, --help help for sync Options inherited from parent commands \u00b6 -t, --access-token string API V2 access token -e, --environment string root all resources from spec file (default \"default\") -f, --file string load appfile spec from file (default \"appfile.yaml\") --log-level string Set log level (default \"info\") SEE ALSO \u00b6 appfile - Deploy app platform specifications to DigitalOcean Auto generated by spf13/cobra on 9-Dec-2020 \u00b6","title":"Appfile sync"},{"location":"cmd/appfile_sync/#appfile-sync","text":"Sync all resources from app platform specs to DigitalOcean","title":"appfile sync"},{"location":"cmd/appfile_sync/#synopsis","text":"Sync all resources from app platform specs to DigitalOcean If there is no app with the existing name, a new app will be create. Otherwise the existing app will be updated with the changes in the spec. appfile sync [flags]","title":"Synopsis"},{"location":"cmd/appfile_sync/#examples","text":"# Sync using defaults: appfile.yaml in current location, default environment and DIGITALOCEAN_ACCESS_TOKEN env var appfile sync # Sync using appfile.yaml in custom location, review environment and access token option appfile sync --file /path/to/appfile.yaml --environment review --access-token $TOKEN # Sync with debug output appfile sync --log-level debug","title":"Examples"},{"location":"cmd/appfile_sync/#options","text":"-h, --help help for sync","title":"Options"},{"location":"cmd/appfile_sync/#options-inherited-from-parent-commands","text":"-t, --access-token string API V2 access token -e, --environment string root all resources from spec file (default \"default\") -f, --file string load appfile spec from file (default \"appfile.yaml\") --log-level string Set log level (default \"info\")","title":"Options inherited from parent commands"},{"location":"cmd/appfile_sync/#see-also","text":"appfile - Deploy app platform specifications to DigitalOcean","title":"SEE ALSO"},{"location":"cmd/appfile_sync/#auto-generated-by-spf13cobra-on-9-dec-2020","text":"","title":"Auto generated by spf13/cobra on 9-Dec-2020"},{"location":"cmd/reference/","text":"CLI Reference for appfile \u00b6 This is a reference for the appfile CLI, which enables you to manage deployments to DigitalOcean App Platform. Command List \u00b6 The following is a complete list of the commands provided by appfile . Command | Description - | - destroy | Destroy apps running in DigitalOcean diff | Diff local app spec against app spec running in DigitalOcean list | List all apps defined in the appfile sync | Sync all resources from app platform specs to DigitalOcean","title":"CLI Reference for appfile"},{"location":"cmd/reference/#cli-reference-for-appfile","text":"This is a reference for the appfile CLI, which enables you to manage deployments to DigitalOcean App Platform.","title":"CLI Reference for appfile"},{"location":"cmd/reference/#command-list","text":"The following is a complete list of the commands provided by appfile . Command | Description - | - destroy | Destroy apps running in DigitalOcean diff | Diff local app spec against app spec running in DigitalOcean list | List all apps defined in the appfile sync | Sync all resources from app platform specs to DigitalOcean","title":"Command List"}]}